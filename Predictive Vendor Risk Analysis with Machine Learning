import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from openpyxl import load_workbook

# Load and split data
data = pd.read_excel('vendor_risk_data.xlsx')
X = data[['Metric1', 'Metric2', 'Metric3']]
y = data['Risk_Flag']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Model training and evaluation
param_grid = {'n_estimators': [100, 200, 300], 'max_depth': [5, 10, 15]}
model = RandomForestClassifier(random_state=42)
grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Best model and predictions
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

# Save classification report to Excel
report = classification_report(y_test, y_pred, output_dict=True)
report_df = pd.DataFrame(report).transpose()
with pd.ExcelWriter('vendor_risk_data.xlsx', engine='openpyxl', mode='a') as writer:
    report_df.to_excel(writer, sheet_name='Model_Evaluation')

# Confusion matrix plot
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['No Risk', 'Risk'], yticklabels=['No Risk', 'Risk'])
plt.title('Confusion Matrix')
plt.savefig('confusion_matrix.png')
print("Model evaluation saved to Excel. Confusion matrix saved as confusion_matrix.png.")
